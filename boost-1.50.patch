--- mongodb-src-r2.0.6/pch.h~	2012-06-04 15:42:54.000000000 +0200
+++ mongodb-src-r2.0.6/pch.h	2012-07-11 14:32:55.482057987 +0200
@@ -79,7 +79,7 @@
 //#include <boost/any.hpp>
 #include "boost/thread/once.hpp"
 //#include <boost/archive/iterators/transform_width.hpp>
-#define BOOST_FILESYSTEM_VERSION 2
+#define BOOST_FILESYSTEM_VERSION 3
 #include <boost/filesystem/convenience.hpp>
 #include <boost/filesystem/exception.hpp>
 #include <boost/filesystem/operations.hpp>
Binary files mongodb-src-r2.0.6.orig/lib/libboost_thread-gcc41-mt-d-1_34_1.a and mongodb-src-r2.0.6/lib/libboost_thread-gcc41-mt-d-1_34_1.a differ
diff -ur mongodb-src-r2.0.6.orig/util/background.cpp mongodb-src-r2.0.6/util/background.cpp
--- mongodb-src-r2.0.6.orig/util/background.cpp	2012-06-04 15:42:54.000000000 +0200
+++ mongodb-src-r2.0.6/util/background.cpp	2012-07-11 14:35:09.392053263 +0200
@@ -89,7 +89,7 @@
             if ( msTimeOut ) {
                 // add msTimeOut millisecond to current time
                 boost::xtime xt;
-                boost::xtime_get( &xt, boost::TIME_UTC );
+                boost::xtime_get( &xt, boost::TIME_UTC_ );
 
                 unsigned long long ns = msTimeOut * 1000000ULL; // milli to nano
                 if ( xt.nsec + ns < 1000000000 ) {
diff -ur mongodb-src-r2.0.6.orig/util/concurrency/mutex.h mongodb-src-r2.0.6/util/concurrency/mutex.h
--- mongodb-src-r2.0.6.orig/util/concurrency/mutex.h	2012-06-04 15:42:54.000000000 +0200
+++ mongodb-src-r2.0.6/util/concurrency/mutex.h	2012-07-11 14:35:09.392053263 +0200
@@ -29,7 +29,7 @@
 
     inline boost::xtime incxtimemillis( long long s ) {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         xt.sec += (int)( s / 1000 );
         xt.nsec += (int)(( s % 1000 ) * 1000000);
         if ( xt.nsec >= 1000000000 ) {
diff -ur mongodb-src-r2.0.6.orig/util/queue.h mongodb-src-r2.0.6/util/queue.h
--- mongodb-src-r2.0.6.orig/util/queue.h	2012-06-04 15:42:54.000000000 +0200
+++ mongodb-src-r2.0.6/util/queue.h	2012-07-11 14:35:09.392053263 +0200
@@ -82,7 +82,7 @@
             Timer timer;
 
             boost::xtime xt;
-            boost::xtime_get(&xt, boost::TIME_UTC);
+            boost::xtime_get(&xt, boost::TIME_UTC_);
             xt.sec += maxSecondsToWait;
 
             scoped_lock l( _lock );
diff -ur mongodb-src-r2.0.6.orig/util/time_support.h mongodb-src-r2.0.6/util/time_support.h
--- mongodb-src-r2.0.6.orig/util/time_support.h	2012-06-04 15:42:54.000000000 +0200
+++ mongodb-src-r2.0.6/util/time_support.h	2012-07-11 14:35:09.392053263 +0200
@@ -106,7 +106,7 @@
         if ( s <= 0 )
             return;
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         xt.sec += (int)( s / 1000000 );
         xt.nsec += (int)(( s % 1000000 ) * 1000);
         if ( xt.nsec >= 1000000000 ) {
@@ -118,13 +118,13 @@
 #elif defined(__sunos__)
     inline void sleepsecs(int s) {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         xt.sec += s;
         boost::thread::sleep(xt);
     }
     inline void sleepmillis(long long s) {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         xt.sec += (int)( s / 1000 );
         xt.nsec += (int)(( s % 1000 ) * 1000000);
         if ( xt.nsec >= 1000000000 ) {
@@ -137,7 +137,7 @@
         if ( s <= 0 )
             return;
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         xt.sec += (int)( s / 1000000 );
         xt.nsec += (int)(( s % 1000000 ) * 1000);
         if ( xt.nsec >= 1000000000 ) {
@@ -202,24 +202,24 @@
 #ifdef _WIN32 // no gettimeofday on windows
     inline unsigned long long curTimeMillis64() {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         return ((unsigned long long)xt.sec) * 1000 + xt.nsec / 1000000;
     }
     inline Date_t jsTime() {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         unsigned long long t = xt.nsec / 1000000;
         return ((unsigned long long) xt.sec * 1000) + t + getJSTimeVirtualSkew() + getJSTimeVirtualThreadSkew();
     }
     inline unsigned long long curTimeMicros64() {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         unsigned long long t = xt.nsec / 1000;
         return (((unsigned long long) xt.sec) * 1000000) + t;
     }    
     inline unsigned curTimeMicros() {
         boost::xtime xt;
-        boost::xtime_get(&xt, boost::TIME_UTC);
+        boost::xtime_get(&xt, boost::TIME_UTC_);
         unsigned t = xt.nsec / 1000;
         unsigned secs = xt.sec % 1024;
         return secs*1000000 + t;
